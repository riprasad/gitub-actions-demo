name: Continuous Integration Workflow

on:
  repository_dispatch:
    types: [abc]
  #push:
  #  branches: [master]
  #pull_request:
  #  branches: [master]

#env:
#  MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#  MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

jobs:
  ci-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Echo Release- Before
        run: |
          echo node --version
          echo npm --version
          echo npx --version
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Import GPG keys and settings.xml
        run: |
          gpg --import /home/runner/work/gitub-actions-demo/gitub-actions-demo/mygpgkey_pub.gpg
          gpg --batch --import /home/runner/work/gitub-actions-demo/gitub-actions-demo/mygpgkey_sec.gpg
          echo "----------------------------------------------------------------------------------------"
          echo "----------------------------------------------------------------------------------------"
          echo "<settings><servers><server><id>ossrh</id><username>${{ secrets.OSSRH_USERNAME }}</username><password>${{ secrets.OSSRH_TOKEN }}</password></server></servers><profiles><profile><id>ossrh</id><activation><activeByDefault>true</activeByDefault></activation><properties><gpg.keyname>${{ secrets.GPG_KEY_ID }}</gpg.keyname><gpg.executable>gpg</gpg.executable><gpg.passphrase>passphrase</gpg.passphrase></properties></profile></profiles></settings>" > /home/runner/.m2/settings.xml
          cat /home/runner/.m2/settings.xml
      - name: Build Project
        run: mvn clean install
      #- name: Upload Artifact
        #uses: actions/upload-artifact@v1
        #with:
          #name: single-module-project
          #path: target/single-module-project.jar
      #- name: Zip Assets
        #if: github.event_name == 'repository_dispatch'
        #run: |
          #zip -r binary.zip ./target/single-module-project.jar
      - name: Create a Release
        #if: github.event_name == 'pull_request' && github.ref == 'refs/heads/master'
        if: github.event_name == 'repository_dispatch'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch Latest Release Version
        run: echo "::set-env name=TAG::$(curl -s https://api.github.com/repos/riprasad/gitub-actions-demo/releases/latest| jq --raw-output '.tag_name'| cut -c 2-)"
      - name: Change POM Version
        run: mvn versions:set -DnewVersion=$TAG
      - name: Publish package to maven central
        if: github.event_name == 'repository_dispatch'
        run: mvn -B deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Get Release Version
        run: echo "${{ github.event.release.tag_name }}"
      - name: Open Issue
        if: failure() && github.event_name == 'pull_request'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issues is created automatically by the Github Actions Workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.",
            "assignees": ["${{ github.event.pull_request.user.login }}"]
            }'
